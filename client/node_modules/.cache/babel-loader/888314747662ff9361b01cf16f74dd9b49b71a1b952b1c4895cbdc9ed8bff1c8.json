{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Phase4-Project/client/src/components/EditEventForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom'; // Import useParams\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditEventForm() {\n  _s();\n  const {\n    eventId\n  } = useParams(); // Use useParams to get the eventId from URL\n\n  // State for the form fields\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState('');\n\n  // Fetch the event details when the component mounts or eventId changes\n  useEffect(() => {\n    const fetchEvent = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/events/${eventId}`);\n        const {\n          name,\n          description,\n          date\n        } = response.data;\n        setName(name);\n        setDescription(description);\n        setDate(date.slice(0, 10)); // Assuming the date comes in ISO format\n      } catch (error) {\n        console.error('Failed to fetch event', error);\n      }\n    };\n    fetchEvent();\n  }, [eventId]); // Dependency array, re-fetch when eventId changes\n\n  // Handle the form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.put(`http://localhost:5000/events/${eventId}`, {\n        name,\n        description,\n        date\n      });\n      alert('Event updated successfully');\n      // Redirect or update UI as needed\n    } catch (error) {\n      console.error('Failed to update event', error);\n      alert('Failed to update event');\n    }\n  };\n\n  // The form JSX goes here\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(EditEventForm, \"URzZQ/69qMo2VmqivDVjl4BUC7s=\", false, function () {\n  return [useParams];\n});\n_c = EditEventForm;\nexport default EditEventForm;\nvar _c;\n$RefreshReg$(_c, \"EditEventForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","EditEventForm","_s","eventId","name","setName","description","setDescription","date","setDate","fetchEvent","response","get","data","slice","error","console","handleSubmit","e","preventDefault","put","alert","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ubuntu/Phase4-Project/client/src/components/EditEventForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom'; // Import useParams\n\nfunction EditEventForm() {\n  const { eventId } = useParams(); // Use useParams to get the eventId from URL\n\n  // State for the form fields\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState('');\n\n  // Fetch the event details when the component mounts or eventId changes\n  useEffect(() => {\n    const fetchEvent = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/events/${eventId}`);\n        const { name, description, date } = response.data;\n        setName(name);\n        setDescription(description);\n        setDate(date.slice(0, 10)); // Assuming the date comes in ISO format\n      } catch (error) {\n        console.error('Failed to fetch event', error);\n      }\n    };\n\n    fetchEvent();\n  }, [eventId]); // Dependency array, re-fetch when eventId changes\n\n  // Handle the form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.put(`http://localhost:5000/events/${eventId}`, { name, description, date });\n      alert('Event updated successfully');\n      // Redirect or update UI as needed\n    } catch (error) {\n      console.error('Failed to update event', error);\n      alert('Failed to update event');\n    }\n  };\n\n  // The form JSX goes here\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form fields for editing an event */}\n    </form>\n  );\n}\n\nexport default EditEventForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAQ,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjC;EACA,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAE,gCAA+BT,OAAQ,EAAC,CAAC;QAC3E,MAAM;UAAEC,IAAI;UAAEE,WAAW;UAAEE;QAAK,CAAC,GAAGG,QAAQ,CAACE,IAAI;QACjDR,OAAO,CAACD,IAAI,CAAC;QACbG,cAAc,CAACD,WAAW,CAAC;QAC3BG,OAAO,CAACD,IAAI,CAACM,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDL,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEf;EACA,MAAMc,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMtB,KAAK,CAACuB,GAAG,CAAE,gCAA+BjB,OAAQ,EAAC,EAAE;QAAEC,IAAI;QAAEE,WAAW;QAAEE;MAAK,CAAC,CAAC;MACvFa,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACF,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CM,KAAK,CAAC,wBAAwB,CAAC;IACjC;EACF,CAAC;;EAED;EACA,oBACErB,OAAA;IAAMsB,QAAQ,EAAEL;EAAa;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvB,CAAC;AAEX;AAACxB,EAAA,CA5CQD,aAAa;EAAA,QACAH,SAAS;AAAA;AAAA6B,EAAA,GADtB1B,aAAa;AA8CtB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}